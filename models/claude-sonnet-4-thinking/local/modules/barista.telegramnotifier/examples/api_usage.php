<?php

/**
 * –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API –º–æ–¥—É–ª—è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */

require_once $_SERVER['DOCUMENT_ROOT'] . '/bitrix/modules/main/include/prolog_before.php';

use Bitrix\Main\Loader;
use Barista\TelegramNotifier\Services\QueueService;
use Barista\TelegramNotifier\Services\ConfigService;
use Barista\TelegramNotifier\Services\TelegramService;
use Barista\TelegramNotifier\Services\AntiSpamService;
use Barista\TelegramNotifier\EventHandler;

if (!Loader::includeModule('barista.telegramnotifier')) {
    die('–ú–æ–¥—É–ª—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
}

// –ü—Ä–∏–º–µ—Ä 1: –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function sendCustomNotification(): void
{
    $eventData = [
        'AUDIT_TYPE_ID' => 'CUSTOM_ERROR',
        'ITEM_ID' => 'order_12345',
        'DESCRIPTION' => '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞ #12345',
        'REMOTE_ADDR' => $_SERVER['REMOTE_ADDR'] ?? '127.0.0.1',
        'REQUEST_URI' => $_SERVER['REQUEST_URI'] ?? '/api/orders',
        'SITE_ID' => SITE_ID,
        'USER_ID' => $GLOBALS['USER']->GetID(),
        'SEVERITY' => 'CRITICAL',
        'TIMESTAMP' => time(),
    ];

    $success = QueueService::addNotification($eventData);
    
    if ($success) {
        echo "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å\n";
    } else {
        echo "–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n";
    }
}

// –ü—Ä–∏–º–µ—Ä 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –º–æ–¥—É–ª—è
function checkModuleSettings(): void
{
    $settings = ConfigService::getAllSettings();
    
    echo "–°—Ç–∞—Ç—É—Å –º–æ–¥—É–ª—è: " . ($settings['enabled'] ? '–í–∫–ª—é—á–µ–Ω' : '–í—ã–∫–ª—é—á–µ–Ω') . "\n";
    echo "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤: " . count($settings['chat_ids']) . "\n";
    echo "–†–µ–∂–∏–º —Ç–∏—à–∏–Ω—ã: " . ($settings['silence_mode'] ? '–í–∫–ª—é—á–µ–Ω' : '–í—ã–∫–ª—é—á–µ–Ω') . "\n";
    
    if (!empty($settings['bot_token'])) {
        $telegram = TelegramService::createFromConfig();
        if ($telegram && $telegram->testConnection()) {
            echo "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram: OK\n";
        } else {
            echo "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram: –û–®–ò–ë–ö–ê\n";
        }
    }
}

// –ü—Ä–∏–º–µ—Ä 3: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–º —Ç–∏—à–∏–Ω—ã
function manageSilenceMode(): void
{
    // –í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º —Ç–∏—à–∏–Ω—ã –¥–ª—è —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è –Ω–∞ 1 —á–∞—Å
    $success = AntiSpamService::setSilenceForEventType('ERROR', 60);
    
    if ($success) {
        echo "–†–µ–∂–∏–º —Ç–∏—à–∏–Ω—ã –≤–∫–ª—é—á–µ–Ω –¥–ª—è ERROR —Å–æ–±—ã—Ç–∏–π\n";
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —Ä–µ–∂–∏–º —Ç–∏—à–∏–Ω—ã
    $inSilence = AntiSpamService::isEventTypeInSilence('ERROR');
    echo "ERROR —Å–æ–±—ã—Ç–∏—è –≤ —Ä–µ–∂–∏–º–µ —Ç–∏—à–∏–Ω—ã: " . ($inSilence ? '–î–∞' : '–ù–µ—Ç') . "\n";
    
    // –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—â–∏—Ç—ã
    $protections = AntiSpamService::getActiveSpamProtections();
    echo "–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—â–∏—Ç: " . count($protections) . "\n";
}

// –ü—Ä–∏–º–µ—Ä 4: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
function showStatistics(): void
{
    $queueStats = QueueService::getQueueStats();
    $spamStats = AntiSpamService::getSpamStats();
    
    echo "=== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏ ===\n";
    foreach ($queueStats as $status => $count) {
        echo ucfirst($status) . ": {$count}\n";
    }
    
    echo "\n=== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω—Ç–∏—Å–ø–∞–º–∞ ===\n";
    echo "–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {$spamStats['total_events']}\n";
    echo "–ê–∫—Ç–∏–≤–Ω—ã—Ö –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫: {$spamStats['active_silences']}\n";
    
    if (!empty($spamStats['most_frequent_events'])) {
        echo "\n–¢–æ–ø-5 —Å–æ–±—ã—Ç–∏–π:\n";
        foreach (array_slice($spamStats['most_frequent_events'], 0, 5) as $event) {
            echo "  {$event['event_type']}: {$event['count']}\n";
        }
    }
}

// –ü—Ä–∏–º–µ—Ä 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
function processQueueManually(): void
{
    $processed = EventHandler::processQueue();
    echo "–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {$processed}\n";
    
    if ($processed > 0) {
        // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
        $recentJobs = QueueService::getRecentJobs(5);
        echo "\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:\n";
        foreach ($recentJobs as $job) {
            echo "  ID: {$job['ID']}, –°—Ç–∞—Ç—É—Å: {$job['STATUS']}, –ß–∞—Ç: {$job['CHAT_ID']}\n";
        }
    }
}

// –ü—Ä–∏–º–µ—Ä 6: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥—É–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
function configureModule(): void
{
    // –í–∫–ª—é—á–∏—Ç—å –º–æ–¥—É–ª—å
    ConfigService::enable();
    
    // –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–Ω—Ç–∏—Å–ø–∞–º
    ConfigService::setAntiSpamInterval(300); // 5 –º–∏–Ω—É—Ç
    ConfigService::setSilenceMode(true);
    ConfigService::setSilenceDuration(3600); // 1 —á–∞—Å
    
    // –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É
    ConfigService::setMaxRetries(3);
    ConfigService::setQueueProcessingLimit(20);
    
    // –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    ConfigService::setLoggingEnabled(true);
    ConfigService::setLogLevel('INFO');
    
    echo "–ú–æ–¥—É–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n";
}

// –ü—Ä–∏–º–µ—Ä 7: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
function sendTestMessage(): void
{
    $telegram = TelegramService::createFromConfig();
    if (!$telegram) {
        echo "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Telegram —Å–µ—Ä–≤–∏—Å\n";
        return;
    }
    
    $chatIds = ConfigService::getChatIds();
    if (empty($chatIds)) {
        echo "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã Chat ID\n";
        return;
    }
    
    $message = "üß™ **–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ**\n\n";
    $message .= "–í—Ä–µ–º—è: " . date('d.m.Y H:i:s') . "\n";
    $message .= "–°–µ—Ä–≤–µ—Ä: " . ($_SERVER['SERVER_NAME'] ?? 'localhost') . "\n";
    $message .= "–ú–æ–¥—É–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!";
    
    $results = $telegram->sendToMultipleChats($chatIds, $message);
    
    foreach ($results as $chatId => $result) {
        if ($result['success']) {
            echo "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {$chatId}\n";
        } else {
            echo "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {$chatId}: {$result['error']}\n";
        }
    }
}

// –ü—Ä–∏–º–µ—Ä 8: –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function cleanupOldData(): void
{
    $result = EventHandler::cleanupOldData();
    
    echo "–û—á–∏—â–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:\n";
    echo "  –û—á–µ—Ä–µ–¥—å: {$result['queue']}\n";
    echo "  –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {$result['notifications']}\n";
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
    $expiredProtections = AntiSpamService::cleanExpiredProtections();
    echo "  –ò—Å—Ç–µ–∫—à–∏–µ –∑–∞—â–∏—Ç—ã: {$expiredProtections}\n";
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤
if (php_sapi_name() === 'cli') {
    $action = $argv[1] ?? 'help';
    
    switch ($action) {
        case 'send':
            sendCustomNotification();
            break;
        case 'check':
            checkModuleSettings();
            break;
        case 'silence':
            manageSilenceMode();
            break;
        case 'stats':
            showStatistics();
            break;
        case 'process':
            processQueueManually();
            break;
        case 'config':
            configureModule();
            break;
        case 'test':
            sendTestMessage();
            break;
        case 'cleanup':
            cleanupOldData();
            break;
        default:
            echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n";
            echo "  send    - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ\n";
            echo "  check   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n";
            echo "  silence - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–º —Ç–∏—à–∏–Ω—ã\n";
            echo "  stats   - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n";
            echo "  process - –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—á–µ—Ä–µ–¥—å\n";
            echo "  config  - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–æ–¥—É–ª—å\n";
            echo "  test    - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç\n";
            echo "  cleanup - –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ\n";
    }
} else {
    echo "–≠—Ç–æ—Ç —Ñ–∞–π–ª –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏\n";
} 